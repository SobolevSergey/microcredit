<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                                   "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!-- Generated 14.05.2012 15:05:34 by Hibernate Tools 3.4.0.CR1 -->
<hibernate-mapping>
	<!-- запрос,получающий количество заявок за данный период. Дата фильтруется по dateContest.  Фильтры,применяемые в нем повторяются в остальных запросах
	по заявкам, поэтому в остальных запросах не комментируются. Количество кредитов смотрим по разсеру коллекции systemCredits. Количество заявок на момент появления выбираемой заявки у пользователя - число заявок для данного пользователя у которых дата или id меньше даты данной заявки(там где minRequests и maxRequests в запросе). Birthdate выбирается как birthdate в последней активной записи peoplepersonal. Аналогично пол - gender по peoplepersonal. По последней записи в peopleMiscEntity определяется семейный статус(marriage).По employmententity - профессия и зарплата. Менеджер, который принимал решение по кредиту определяется по наличию в eventlog события по данному кредиту. Place, region, city - по  последнему addressEntity. Channel - канал поступления денег клиенту определяется по последней записи PeopleBehaviour с определенным parameter_id по справочнику -->
	<query name="getRequestsEntityCount">
		<![CDATA[select count(r.id) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests))
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
		<!-- запрос,получающий количество отказов по заявкам, почти такой же как getRequestsEntityCount, но добавлен дополнительный фильтр по статусу заявки - отказ -->
        <query name="getRequestsRejectsCount">
		<![CDATA[select count(r.id) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :dateStart AND  r.datecontest <= :dateEnd and r.statusId.id = 2 AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
			<!-- запрос,получающий количество новых клиентов, почти такой же как getRequestsEntityCount, но добавлен дополнительный фильтр - последнее условие, проверяет что это первая заявка клиента - ее id минимален из всех id заявок у клиента
		-->
          <query name="getNewClientsCount">
		<![CDATA[select count(r.id) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :dateStart AND  r.datecontest <= :dateEnd 
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		(r.id = (select min(cr.id) from ru.simplgroupp.persistence.CreditRequestEntity cr where cr.peopleMainId = r.peopleMainId))
		]]>
	</query>
	<!-- получает средний од новых кредитов за период, по полю creditdatabeg сравнивается дата, условия фильтров такие же как и в запросах по заявкам(см 1 запрос). Здесь, и во всех остальных запросах по кредитам применяются дополнительные условия - кредит должен быть isActive,его статус не должен быть отменен(у statusId, который ссылается на запись справочника codeinteger не должен быть равен 7)   -->
        <query name="getCreditsAvgCommonDebt">
		<![CDATA[ select COALESCE(avg(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdatabeg >= :dateStart AND  c.creditdatabeg <= :dateEnd AND size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))

		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		]]>
	</query>
	<query name="getFinishedCreditsCommonDebt">
		<![CDATA[ select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.isover is true and c.creditdataendfact >= :dateStart and c.creditdataendfact <= :dateEnd AND size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))

		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		]]>
	</query>
	<!-- получает средневзвешенную ставку новых кредитов за период, по полю creditdatabeg сравнивается дата, условия фильтров такие же как и в запросах по заявкам(см 1 запрос). Здесь, и во всех остальных запросах по кредитам применяются дополнительные условия - кредит должен быть isActive,его статус не должен быть отменен(у statusId, который ссылается на запись справочника codeinteger не должен быть равен 7). Расчет идет по формуле, как на сайте http://alter-credit.ru/info/articles/srednevzveshennaja-procentnaja-stavka.html используя поля creditsum - сумма кредита, и creditpercent - процент кредита.    -->
          <query name="getCreditAvgWeightedPercent">
		<![CDATA[select (COALESCE(sum(c.creditsum*c.creditpercent),0) / (CASE COALESCE(sum(c.creditsum),0) WHEN 0 THEN 1 ELSE COALESCE(sum(c.creditsum),0) END))*100 from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdatabeg >= :dateStart AND  c.creditdatabeg <= :dateEnd AND size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает  средний срок новых кредитов за период, по полю creditdatabeg сравнивается дата, условия фильтров такие же как и в запросах по заявкам(см 1 запрос). Здесь, и во всех остальных запросах по кредитам применяются дополнительные условия - кредит должен быть isActive,его статус не должен быть отменен(у statusId, который ссылается на запись справочника codeinteger не должен быть равен 7).     -->
          <sql-query name="getCreditAvgTerm">
		<![CDATA[select COALESCE(avg(DATE_PART('day',c.creditdataend - creditdatabeg)),0) from credit c where c.partners_id = 1 and (select codeinteger from reference where id = c.creditstatus_id) != 7 and c.isactive = 1 and c.creditdatabeg >= :dateStart AND  c.creditdatabeg <= :dateEnd
		and 
		(select birthdate from peoplepersonal p where p.peoplemain_id= c.peoplemain_id and p.birthdate is not null order by p.databeg desc limit 1)  >= :minBirthdate and (select birthdate from peoplepersonal p where p.peoplemain_id= c.peoplemain_id and p.birthdate is not null order by p.databeg desc limit 1)  <= :maxBirthdate 
		and
		(:gender = '' or (select r.code from reference r where r.id = (select  p.gender from peoplepersonal p where p.peoplemain_id = c.peoplemain_id and p.gender is not null order by p.databeg desc limit 1)) = :gender ) 
		and 
		(:marriage = -1 or (select r.codeinteger from reference r where r.id = (select  p.marriage_id from peoplemisc p where p.peoplemain_id = c.peoplemain_id and p.marriage_id is not null order by p.databeg desc limit 1)) = :marriage ) 
		and 
		(:profession = -1 or (select r.codeinteger from reference r where r.id = (select  p.profession_id from employment p where p.peoplemain_id = c.peoplemain_id and p.profession_id is not null order by p.databeg desc limit 1)) = :profession )
		and 
		((:minSalary = cast(-1 as double precision)) or (((select r.codeinteger from reference r where r.id = (select  p.profession_id from employment p where p.peoplemain_id = c.peoplemain_id and p.profession_id is not null order by p.databeg desc limit 1)) >=:minSalary) and 
		((select  p.salary from employment p where p.peoplemain_id = c.peoplemain_id and p.profession_id is not null order by p.databeg desc limit 1) <=:maxSalary)))
		and 
		((:manager = -1) or exists(select * from eventlog log where (log.creditrequest_id = c.creditrequest_id or log.credit_id = c.id) and log.users_id = :manager))
		and
		((:product = -1) or (c.products_id = :product)) 
		and
		((:region = '') or ((select a.region from address a where a.peoplemain_id = c.peoplemain_id and a.region is not null  order by a.databeg desc limit  1) = :region )) 
		and
		((:place = '') or ((select a.place from address a where a.peoplemain_id = c.peoplemain_id and a.place is not null  order by a.databeg desc limit  1) = :place )) 
		and
		((:city = '') or ((select a.city from address a where a.peoplemain_id = c.peoplemain_id and a.city is not null  order by a.databeg desc limit  1) = :city )) 
		and
		((:channel = '') or (exists(select pb from peoplebehavior pb where pb.peoplemain_id = c.peoplemain_id and (select refer.ref_header_id from reference refer where refer.id = pb.parameter_id) = 61 and (select refer.codeinteger from reference refer where refer.id = pb.parameter_id) = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select * from payment paym where paym.credit_id = c.id and (select refer.codeinteger from reference refer where refer.id = paym.accounttype_id) = :paymentWay and (select refer.codeinteger from reference refer where refer.id = paym.paymenttype_id) = 1 and (select refer.ref_header_id from reference refer where refer.id = paym.paymenttype_id) = 36)))
		]]>
	</sql-query>
			<!-- получает количество новых кредитов за период, по полю creditdatabeg сравнивается дата, условия фильтров такие же как и в запросах по заявкам(см 1 запрос). Здесь, и во всех остальных запросах по кредитам применяются дополнительные условия - кредит должен быть isActive,его статус не должен быть отменен(у statusId, который ссылается на запись справочника codeinteger не должен быть равен 7)   -->
         <query name="getCreditsCount">
		<![CDATA[select count(c) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdatabeg >= :dateStart AND  c.creditdatabeg <= :dateEnd AND size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает сумму од новых кредитов за период, по полю creditdatabeg сравнивается дата, условия фильтров такие же как и в запросах по заявкам(см 1 запрос). Здесь, и во всех остальных запросах по кредитам применяются дополнительные условия - кредит должен быть isActive,его статус не должен быть отменен(у statusId, который ссылается на запись справочника codeinteger не должен быть равен 7)   -->
      <query name="getCreditsCommonDebt">
		<![CDATA[select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1  AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdatabeg >= :dateStart AND  c.creditdatabeg <= :dateEnd AND size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- план кредитов к оплате - кол-во, получаем как количество кредитов у которых дата окончания(creditdataend попадает на период между dateStart и dateEnd) все остальные фильтры во второй части запроса как и в первом запросе-->
      <query name="getPlannedToPayAmount">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataend >= :dateStart AND  c.creditdataend <= :dateEnd and size(c.peopleMainId.systemCredits) >= :minUserCredits and size(c.peopleMainId.systemCredits) <= :maxUserCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- план кредитов к оплате - сумма, получаем как сумму creditsumback  кредитов у которых дата окончания(creditdataend попадает на период между dateStart и dateEnd) все остальные фильтры во второй части запроса как и в первом запросе-->
	<query name="getPlannedToPaySum">
		<![CDATA[select COALESCE(sum(c.creditsumback),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataend >= :dateStart AND  c.creditdataend <= :dateEnd
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- план кредитов к оплате - сумма од, получаем как сумму creditsum у которых дата окончания(creditdataend попадает на период между dateStart и dateEnd) все остальные фильтры во второй части запроса как и в первом запросе-->
		<query name="getPlannedToPaySumCommonDebt">
		<![CDATA[select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditsumback is not null AND c.creditdataend >= :dateStart AND  c.creditdataend <= :dateEnd and size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- план штрафов к оплате, получаем как сумму amountPenalty creditdetails с codeinteger 3(просрочка) самых последних для данного кредита в данном периоде-->
	<query name="getPlannedToPaySumPenalties">
		<![CDATA[select COALESCE(sum(cd.amountPenalty),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.id =(select max(cdd.id) from ru.simplgroupp.persistence.CreditDetailsEntity cdd where cdd.creditId = cd.creditId and cdd.amountPenalty is not null and cdd.eventDate <= :dateEnd and cdd.eventDate >= :dateStart and cdd.operationId.codeinteger = 3) and cd.operationId.codeinteger = 3 and cd.eventDate <= :dateEnd and cd.eventDate >= :dateStart and cd.amountPenalty is not null
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		]]>
	</query>
	<sql-query name="getPlannedToPaySumPenaltiesOld">
		<![CDATA[select COALESCE(sum(penalties.penalty),0) from (select (select cs.amount from creditsums cs where cs.credit_id = c.id AND (select r.ref_header_id from reference r where r.id = cs.sum_id) = 64 AND (select r.codeinteger from reference r where r.id = cs.sum_id) = 3  order by cs.amountdate desc limit 1) as penalty from credit c where c.partners_id = 1 and (select codeinteger from reference where id = c.creditstatus_id) != 7 and c.isactive = 1 and c.creditsumback is not null and c.creditdataend >= :dateStart AND  c.creditdataend <= :dateEnd
		and 
		((select birthdate from peoplepersonal p where p.peoplemain_id= c.peoplemain_id and p.birthdate is not null order by p.databeg desc limit 1)  >= :minBirthdate and (select birthdate from peoplepersonal p where p.peoplemain_id= c.peoplemain_id and p.birthdate is not null order by p.databeg desc limit 1)  <= :maxBirthdate )
		and
		(:gender = '' or (select r.code from reference r where r.id = (select  p.gender from peoplepersonal p where p.peoplemain_id = c.peoplemain_id and p.gender is not null order by p.databeg desc limit 1)) = :gender ) 
		and 
		(:marriage = -1 or (select r.codeinteger from reference r where r.id = (select  p.marriage_id from peoplemisc p where p.peoplemain_id = c.peoplemain_id and p.marriage_id is not null order by p.databeg desc limit 1)) = :marriage ) 
		and 
		(:profession = -1 or (select r.codeinteger from reference r where r.id = (select  p.profession_id from employment p where p.peoplemain_id = c.peoplemain_id and p.profession_id is not null order by p.databeg desc limit 1)) = :profession )
		and 
		((:minSalary = cast(-1 as double precision)) or ((select r.codeinteger from reference r where r.id = (select  p.profession_id from employment p where p.peoplemain_id = c.peoplemain_id and p.profession_id is not null order by p.databeg desc limit 1)) >=:minSalary and (select  p.salary from employment p where p.peoplemain_id = c.peoplemain_id and p.profession_id is not null order by p.databeg desc limit 1) <=:maxSalary)) 
		and
		((:manager = -1) or exists(select * from eventlog log where (log.creditrequest_id = (select creditrequest_id from credit where id = c.id) and log.users_id = :manager)))
		and
		((:product = -1) or ((select products_id from credit where id = c.id) = :product)) 
		and
		((:region = '') or ((select a.region from address a where a.peoplemain_id = (select peoplemain_id from credit where id = c.id) and a.region is not null order by a.databeg desc limit 1) = :region)) 
		and
		((:city = '') or ((select a.city from address a where a.peoplemain_id = (select peoplemain_id from credit where id = c.id) and a.city is not null order by a.databeg desc limit 1) = :city)) 
		and
		((:place = '') or ((select a.place from address a where a.peoplemain_id = (select peoplemain_id from credit where id = c.id) and a.place is not null order by a.databeg desc limit 1) = :place))
		and
		((:channel = '') or (exists(select * from peoplebehavior pb where pb.peoplemain_id = (select peoplemain_id from credit where id = c.id) and (select refer.ref_header_id from reference refer where id = pb.parameter_id) = 61 and (select refer.codeinteger from reference refer where id = pb.parameter_id) = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select * from payment paym where paym.credit_id = c.id and (select refer.codeinteger from reference refer where id = paym.accounttype_id) = :paymentWay and (select refer.codeinteger from reference refer where id = paymenttype_id) = 1 and (select refer.ref_header_id from reference refer where id = paymenttype_id)= 36))) 
		) as penalties]]>
	</sql-query>
		<!-- здесь считаем количество кредитов по которым был платеж в данном периоде как количество уникальных credit_id
		для платежей которые были  в данном периоде-->
	<query name="getPayedCreditsAmt">
		<![CDATA[select count(distinct pm.creditId) from ru.simplgroupp.persistence.PaymentEntity pm where pm.processDate >= :dateStart AND  pm.processDate <= :dateEnd and pm.status = 1 AND size(pm.creditId.peopleMainId.systemCredits) >= :minUserCredits and size(pm.creditId.peopleMainId.systemCredits) <= :maxUserCredits 
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = pm.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = pm.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = pm.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = pm.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = pm.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = pm.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = pm.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = pm.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = pm.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = pm.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = pm.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = pm.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = pm.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = pm.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = pm.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (pm.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = pm.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = pm.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = pm.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = pm.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = pm.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = pm.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = pm.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = pm.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		]]>
	</query>
		<!-- сумма всех платежей за данный период. считается как сумма amountOperation по creditdetails operationId
		которых соответствует операции платежа по справочнику-->
	<query name="getPayedCreditsSum">
		<![CDATA[select COALESCE(sum(cd.amountOperation),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart AND  cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- сумма од всех платежей за данный период. считается как сумма (amountOperation - amountPercent) по creditdetails operationId
		которых соответствует операции платежа по справочнику-->
	<query name="getPayedCreditsSumCommonDebt">
		<![CDATA[select COALESCE(sum(cd.amountOperation - COALESCE(cd.amountPercent,0)  - COALESCE(cd.amountOverpay,0) ),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart AND  cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4 and size(cd.creditId.peopleMainId.systemCredits) >= :minCredits AND size(cd.creditId.peopleMainId.systemCredits) <= :maxCredits and cd.creditId.partnersId.id = 1 and cd.creditId.creditStatusId.codeinteger != 7 and cd.creditId.isactive = 1
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- считает сумму од по платежам кредитов которые должны быть погашены в данный период-->
	<query name="getPayedCreditsSumCommonDebtForPlannedToCloseCredits">
		<![CDATA[select COALESCE(sum(cd.amountOperation - COALESCE(cd.amountPercent,0) - COALESCE(cd.amountOverpay,0) ),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4
		and cd.creditId.id in (select cr.id from ru.simplgroupp.persistence.CreditEntity cr where cr.creditdataend >= :dateStart and cr.creditdataend <= :dateEnd and cr.partnersId.id = 1 and cr.isactive = 1 and cr.creditStatusId.codeinteger != 7)
		 and size(cd.creditId.peopleMainId.systemCredits) >= :minCredits AND size(cd.creditId.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- сумма всех платежей штрафов за данный период. считается как сумма amountPenalties по creditdetails operationId
		которых соответствует операции платежа по справочнику-->
	<query name="getPayedCreditsSumPenalties">
		<![CDATA[select COALESCE(sum(cd.amountPenalty),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart AND  cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4 and cd.creditId.partnersId.id = 1 and cd.creditId.creditStatusId.codeinteger != 7 and cd.creditId.isactive = 1
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- сумма всех платежей процентов за данный период. считается как сумма amountPercenаяяяяzzzt по creditdetails operationId
		которых соответствует операции платежа по справочнику-->
	<query name="getPayedCreditsSumPercents">
		<![CDATA[select COALESCE(sum(cd.amountPercent - COALESCE(cd.amountPenalty,0) ),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart AND  cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4 and cd.creditId.partnersId.id = 1 and cd.creditId.creditStatusId.codeinteger != 7 and cd.creditId.isactive = 1
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- сумма всех платежей до окончания кредита(досрочка) за данный период. считается как сумма amountOperation по creditdetails operationId которых соответствует операции платежа по справочнику. В данном типе записей creditDetails anotherId указывает на платеж которому соотвествует записи, а через платеж мы выходим на кредит и сравниваем его дату окончания с датой платежа. Она должна быть меньше планируемой даты окончания кредита(creditdataend)	 --> 
	<query name="getPayedCreditsSumBeforeTerm">
		<![CDATA[select COALESCE(sum(cd.amountOperation),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart AND  cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4 and cd.eventDate < (select payment.creditId.creditdataend from ru.simplgroupp.persistence.PaymentEntity payment where payment.id = cd.anotherId) 
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- сумма всех платежей в срок за данный период. считается как сумма amountOperation по creditdetails operationId которых соответствует операции платежа по справочнику. В данном типе записей creditDetails anotherId указывает на платеж которому соотвествует записи, а через платеж мы выходим на кредит и сравниваем его дату окончания с датой платежа. Она должна быть не позже одного дня от планируемой даты окончания кредитов. Сравнение происходит с помощью вычитания epoch от соответствующих дат платежа и окончания кредита - разница в секундах 	 --> 
	<query name="getPayedCreditsSumInTerm">
		<![CDATA[select COALESCE(sum(cd.amountOperation),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart AND  cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4 and EXTRACT(EPOCH FROM(cd.eventDate)) - EXTRACT(EPOCH FROM (select payment.creditId.creditdataend from ru.simplgroupp.persistence.PaymentEntity payment where payment.id = cd.anotherId)) >=0 AND EXTRACT(EPOCH FROM(cd.eventDate)) - EXTRACT(EPOCH FROM (select payment.creditId.creditdataend from ru.simplgroupp.persistence.PaymentEntity payment where payment.id = cd.anotherId)) < 24*60*60
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- сумма всех платежей с просрочкой в количество от minDays до maxDays за данный период. считается как сумма amountOperation по creditdetails operationId которых соответствует операции платежа по справочнику. В данном типе записей creditDetails anotherId указывает на платеж которому соотвествует записи, а через платеж мы выходим на кредит и сравниваем его дату окончания с датой платежа. Она должна быть не позже одного дня от планируемой даты окончания кредитов. Сравнение происходит с помощью вычитания epoch от соответствующих дат платежа и окончания кредита - разница в секундах.  	 --> 
	<query name="getPayedCreditsSumWithOverdueDays">
		<![CDATA[select COALESCE(sum(cd.amountOperation),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart AND  cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4 and EXTRACT(EPOCH FROM(cd.eventDate)) - EXTRACT(EPOCH FROM (select payment.creditId.creditdataend from ru.simplgroupp.persistence.PaymentEntity payment where payment.id = cd.anotherId)) >=CAST(24 as long)*60*60*(:minDays) AND EXTRACT(EPOCH FROM(cd.eventDate)) - EXTRACT(EPOCH FROM (select payment.creditId.creditdataend from ru.simplgroupp.persistence.PaymentEntity payment where payment.id = cd.anotherId)) < CAST(24 as long)*60*60*(:maxDays)
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- сумма всех платежей с просрочкой в количество от minDays  за данный период. считается как сумма amountOperation по creditdetails operationId которых соответствует операции платежа по справочнику. В данном типе записей creditDetails anotherId указывает на платеж которому соотвествует записи, а через платеж мы выходим на кредит и сравниваем его дату окончания с датой платежа. Она должна быть не позже одного дня от планируемой даты окончания кредитов. Сравнение происходит с помощью вычитания epoch от соответствующих дат платежа и окончания кредита - разница в секундах.  	 --> 
	<query name="getPayedCreditsSumWithOverdueDaysFrom">
		<![CDATA[select COALESCE(sum(cd.amountOperation),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart AND  cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4 and EXTRACT(EPOCH FROM(cd.eventDate)) - EXTRACT(EPOCH FROM (select payment.creditId.creditdataend from ru.simplgroupp.persistence.PaymentEntity payment where payment.id = cd.anotherId)) >=CAST(24 as long)*60*60*(:minDays) 
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		]]>
	</query>
	<!-- получает количество кредитов по которым были продления за период - количество уникальных(distinct) credit_id prolong_entity,дату смотрим по полю longdate --> 
	<query name="getProlongationsCreditAmount">
		<![CDATA[select count(distinct prol.creditId) from ru.simplgroupp.persistence.ProlongEntity prol where prol.longdate >= :dateStart AND  prol.longdate <= :dateEnd and size(prol.creditId.peopleMainId.systemCredits) >= :minCredits AND size(prol.creditId.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = prol.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (prol.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = prol.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = prol.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36))) 
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))]]>
	</query>
	<!-- получает количество продлений за период - количество prolong_entity,дату смотрим по полю longdate --> 
	<query name="getProlongationsAmount">
		<![CDATA[select count(prol) from ru.simplgroupp.persistence.ProlongEntity prol where prol.longdate >= :dateStart AND  prol.longdate <= :dateEnd and size(prol.creditId.peopleMainId.systemCredits) >= :minCredits AND size(prol.creditId.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = prol.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (prol.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = prol.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = prol.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		and 		
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))]]>
	</query>
		<!-- получает сумму од кредитов по которым были продления за период - то есть их id входят в множество id кредитов по которым были продления за данный период (подзапрос where id in) --> 
	<query name="getProlongationsCreditAvgSum"> 
		<![CDATA[select COALESCE(avg(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.id in (select p.creditId.id from ru.simplgroupp.persistence.ProlongEntity p where p.longdate >= :dateStart AND  p.longdate <= :dateEnd and size(p.creditId.peopleMainId.systemCredits) >= :minCredits AND size(p.creditId.peopleMainId.systemCredits) <= :maxCredits)
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает cредний срок кредитов по которым были продления за период - то есть их id входят в множество id кредитов по которым были продления за данный период (подзапрос where id in) --> 
	<query name="getProlongationsCreditAvgTerm">
		<![CDATA[select COALESCE(avg(prol.longdays),0) from ru.simplgroupp.persistence.ProlongEntity prol where prol.longdate >= :dateStart AND  prol.longdate <= :dateEnd and size(prol.creditId.peopleMainId.systemCredits) >= :minCredits AND size(prol.creditId.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = prol.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = prol.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = prol.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (prol.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = prol.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = prol.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = prol.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = prol.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
        and   
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = prol.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = prol.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))]]>
	</query>
			<!-- получает средний платеж продлениям. Запрос может показаться довольно сложным тк содержит много вложенных подзапросов. так как результат выбирается из подзапроса то сверху его пришлось обернуть еще селектом (select from select). Во внешнем подзапросе выбор идет из creditdetails cr1 сответствующего продлению, но при этом в данном запросе мы во внутреннем подзапросе выбираем операцию платежа по тому же кредиту из creditdetails cr2 дата которой больше или равна дате cr1, ближайшая к ней(order by eventdate desc limit 1) и отстоит от нее не более чем на число дней указанных в конфиге продукта(waitPayment)--> 
	<sql-query name="getProlongationsCreditAvgPayment">
		<![CDATA[select COALESCE(avg(sums.amt_percent),0) from (select (select amount_percent from creditdetails cr2 where operation_id = (select id from reference where ref_header_id = 60 and codeinteger = 4) and cr2.eventDate >= cr1.eventdate and cr2.eventDate <= cr1.eventDate + interval '1 day'*(select cast(datavalue as numeric) from product_config config where config.name='waitPayment' and (select rf.ref_header_id from reference rf where rf.id = config.configtype_id) = 71 and (select rf.codeinteger from reference rf where rf.id = config.configtype_id) = 2) and cr2.eventDate >= :dateStart and cr2.eventDate <=:dateEnd and (select credit_id from prolong pr where pr.id = cr1.another_id)=(select credit_id from payment pm where pm.id = cr2.another_id)  order by eventdate asc limit 1) as amt_percent from creditdetails cr1 where operation_id = (select id from reference where ref_header_id = 60 and codeinteger = 2)
		and 
		(select birthdate from peoplepersonal p where p.peoplemain_id= (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and p.birthdate is not null order by p.databeg desc limit 1)  >= :minBirthdate and (select birthdate from peoplepersonal p where p.peoplemain_id= (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and p.birthdate is not null order by p.databeg desc limit 1)  <= :maxBirthdate 
		and
		(:gender = '' or (select r.code from reference r where r.id = (select  p.gender from peoplepersonal p where p.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and p.gender is not null order by p.databeg desc limit 1)) = :gender )
		and 
		(:marriage = -1 or (select r.codeinteger from reference r where r.id = (select  p.marriage_id from peoplemisc p where p.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and p.marriage_id is not null order by p.databeg desc limit 1)) = :marriage ) 
		and 
		(:profession = -1 or (select r.codeinteger from reference r where r.id = (select  p.profession_id from employment p where p.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and p.profession_id is not null order by p.databeg desc limit 1)) = :profession ) 
		and
		((:manager = -1) or exists(select * from eventlog log where (log.creditrequest_id = (select creditrequest_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id))) and log.users_id = :manager))
		and
		((:product = -1) or ((select products_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) = :product)) 
		and
		((:region = '') or ((select a.region from address a where a.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and a.region is not null order by a.databeg desc limit 1) = :region)) 
		and
		((:city = '') or ((select a.city from address a where a.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and a.city is not null order by a.databeg desc limit 1) = :city)) 
		and
		((:place = '') or ((select a.place from address a where a.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and a.place is not null order by a.databeg desc limit 1) = :place))
		and
		((:channel = '') or (exists(select * from peoplebehavior pb where pb.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and (select refer.ref_header_id from reference refer where id = pb.parameter_id) = 61 and (select refer.codeinteger from reference refer where id = pb.parameter_id) = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select * from payment paym where paym.credit_id = (select credit_id from prolong pr where pr.id = cr1.another_id) and (select refer.codeinteger from reference refer where id = paym.accounttype_id) = :paymentWay and (select refer.codeinteger from reference refer where id = paymenttype_id) = 1 and (select refer.ref_header_id from reference refer where id = paymenttype_id)= 36))) 
		and 
		((:minSalary = cast(-1 as double precision)) or ( (select  p.salary from employment p where p.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and p.profession_id is not null order by p.databeg desc limit 1) >=:minSalary and (select  p.salary from employment p where p.peoplemain_id = (select peoplemain_id from credit where id = (select credit_id from prolong pr where pr.id = cr1.another_id)) and p.profession_id is not null order by p.databeg desc limit 1) <=:maxSalary)))
		 as sums;]]>
	</sql-query>
	<!-- количество кредитов которые по плану должны быть закрыты в данный период - смотрим по creditdataend-->
	<query name="getPlannedToCloseCreditsCount">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataend >= :dateStart AND  c.creditdataend <= :dateEnd and size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits and size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- количество кредитов которые были закрыты в данный период - смотрим по creditdataendfact-->
	<query name="getClosedCreditCount">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataendfact >= :dateStart AND  c.creditdataendfact <= :dateEnd AND c.isover is true and size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits and c.creditdataendfact is not null and c.creditdataend is not null
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<query name="getClosedCreditCountBeforeTerm">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1  AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataendfact >= :dateStart AND  c.creditdataendfact <= :dateEnd AND c.isover is true  AND EXTRACT(EPOCH FROM(c.creditdataendfact)) - EXTRACT(EPOCH FROM (c.creditdataend)) <0
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<query name="getClosedCreditCountBeforeDate">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1  AND c.creditStatusId.codeinteger != 7 and c.isactive = 1  AND c.creditdataendfact <= :dateEnd AND c.isover is true  
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- количество кредитов которые были закрыты в данный период в срок смотрим по creditdataendfact, считаем разницу в секундах между creditdataendfact и creditdataend - не должна быть более одного дня и должна быть положительной -->
	<query name="getClosedCreditCountInTerm">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1  AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataendfact >= :dateStart AND  c.creditdataendfact <= :dateEnd AND c.isover is true  AND EXTRACT(EPOCH FROM(c.creditdataendfact)) - EXTRACT(EPOCH FROM (c.creditdataend)) >=0 AND EXTRACT(EPOCH FROM(c.creditdataendfact)) - EXTRACT(EPOCH FROM (c.creditdataend)) < 24*60*60
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- количество кредитов которые были закрыты в данный период с просрочкой от минимального до максимального числа дней(maxDays и minDays) смотрим по creditdataendfact, считаем разницу в секундах между creditdataendfact и creditdataend и проверяем входит ли она в допустимый промежуток -->
	<query name="getClosedCreditCountWithOverdueDays">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataendfact >= :dateStart AND  c.creditdataendfact <= :dateEnd AND c.isover is true  AND EXTRACT(EPOCH FROM(c.creditdataendfact)) - EXTRACT(EPOCH FROM (c.creditdataend)) >=0 AND EXTRACT(EPOCH FROM(c.creditdataendfact)) - EXTRACT(EPOCH FROM (c.creditdataend)) >=CAST(24 as long)*60*60*(:minDays) AND EXTRACT(EPOCH FROM(c.creditdataendfact)) - EXTRACT(EPOCH FROM (c.creditdataend)) < CAST(24 as long)*60*60*(:maxDays)
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- количество кредитов которые были закрыты в данный период с просрочкой от минимального числа дней(minDays) смотрим по creditdataendfact, считаем разницу в секундах между creditdataendfact и creditdataend и проверяем входит ли она в допустимый промежуток (должна быть больше определенного числа дней - переведено в секунды умножением)-->
	<query name="getClosedCreditCountWithOverdueDaysPlus">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataendfact >= :dateStart AND  c.creditdataendfact <= :dateEnd AND c.isover is true  AND EXTRACT(EPOCH FROM(c.creditdataendfact)) - EXTRACT(EPOCH FROM (c.creditdataend)) >=0 AND EXTRACT(EPOCH FROM(c.creditdataendfact)) - EXTRACT(EPOCH FROM (c.creditdataend)) >=CAST(24 as long)*60*60*(:minDays)
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- портфель - количество кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор) -->
	<query name="getPortfailCount">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and  ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and (:dateEnd < c.creditdataendfact)))) and c.creditdataend is not null
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- портфель активный - количество кредитов по которым был платеж в данный период -->
	<query name="getPortfailCountActive">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and exists(select p from ru.simplgroupp.persistence.PaymentEntity p where p.creditId = c and p.processDate >=:dateStart and p.processDate <= :dateEnd and 
		 p.status = 1)
		 and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<query name="getPortfailCommonSumDebtActive">
		<![CDATA[select  COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and exists(select p from ru.simplgroupp.persistence.PaymentEntity p where p.creditId = c and p.processDate >=:dateStart and p.processDate <= :dateEnd and p.status = 1) and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>		 
</query>
	<!-- портфель в срок - количество кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор). Дополнительное условие проверка что на тот момент не было просрочки - проверка разницы dateEnd и creditdataend которая не должна превышать более 1 дня -  -->
	<query name="getPortfailCountInTerm">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and ( :dateEnd  < c.creditdataendfact)))) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) < CAST(24 as long)*60*60
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- портфель просрочка - количество кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор). Дополнительное условие проверка что на тот момент кредит был с просрочкой - проверка разницы dateEnd и creditdataend которая  должна превышать 1 день -  -->
	<query name="getPortfailCountWithOverdue">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and
		  ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and (:dateEnd < c.creditdataendfact)))) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) >= CAST(24 as long)*60*60
		  and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- портфель просрочка - количество кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор). Дополнительное условие проверка что на тот момент кредит был с просрочкой - проверка разницы dateEnd и creditdataend которая  должна быть в днях от minDays до maxDays  -  -->
	<query name="getPortfailCountWithOverdueInterval">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and (:dateEnd < c.creditdataendfact)))) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) >= CAST(24 as long)*60*60*(:minDays) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) < CAST(24 as long)*60*60*(:maxDays)
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- портфель просрочка - количество кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор). Дополнительное условие проверка что на тот момент кредит был с просрочкой - проверка разницы dateEnd и creditdataend которая  должна быть в днях больше чем равно minDays   -  -->
	<query name="getPortfailCountWithOverduePlus">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c  where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and (:dateEnd < c.creditdataendfact)))) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) >= CAST(24 as long)*60*60*(:minDays)
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- портфель сумма од кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор) -->
	<query name="getPortfailCommonSumDebt">
		<![CDATA[select COALESCE(sum(case when cd.operationId.codeinteger = 1 then cd.amountMain else -(cd.amountOperation - cd.amountPercent - COALESCE(cd.amountOverpay,0) ) end),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate <= :dateEnd and
		(cd.operationId.codeinteger = 1 or (cd.operationId.codeinteger = 4 and (select p.partnersId.id from ru.simplgroupp.persistence.PaymentEntity p where p.id = cd.anotherId) != 1))
		and cd.creditId.partnersId.id = 1 and cd.creditId.creditStatusId.codeinteger != 7 and cd.creditId.isactive = 1  
		and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		]]>
	</query>
	<query name="getPaymentsToClientsCount">
		<![CDATA[select count(*) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate <= :dateEnd and
		cd.operationId.codeinteger = 1 
		and cd.creditId.partnersId.id = 1 and cd.creditId.creditStatusId.codeinteger != 7 and cd.creditId.isactive = 1  
		and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = cd.creditId.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = cd.creditId.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = cd.creditId.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = cd.creditId.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = cd.creditId.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (cd.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = cd.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = cd.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = cd.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = cd.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		]]>
	</query>
	<!-- сумма од портфель в срок - сумма од кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор). Дополнительное условие проверка что на тот момент не было просрочки - проверка разницы dateEnd и creditdataend которая не должна превышать более 1 дня -  -->
	<query name="getPortfailCommonSumDebtInTerm">
		<![CDATA[select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and (:dateEnd < c.creditdataendfact)))) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) < CAST(24 as long)*60*60
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<query name="getPortfailCommonSumDebtWithOverdue">
		<![CDATA[select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and (:dateEnd < c.creditdataendfact)))) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) >= CAST(24 as long)*60*60
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- портфель просрочка сумма од- сумма од кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор). Дополнительное условие проверка что на тот момент кредит был с просрочкой - проверка разницы dateEnd и creditdataend которая  должна быть в днях от minDays до maxDays  -  -->
	<query name="getPortfailCommonSumDebtWithOverdueInterval">
		<![CDATA[select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and (:dateEnd < c.creditdataendfact)))) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) >= CAST(24 as long)*60*60*(:minDays) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) < CAST(24 as long)*60*60*(:maxDays)
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- портфель просрочка сумма од- сумма од кредитов, которые были активны на конец периода(dateEnd). Проверяется это по creditdatabeg, котора должна быть меньше или равна чем dateEnd, а также либо кредит должен быть не isover либо dateEnd < creditdataendfact(то есть то что кредит был активен на тот момент либо активен до сих пор). Дополнительное условие проверка что на тот момент кредит был с просрочкой - проверка разницы dateEnd и creditdataend которая  должна быть в днях больше или равно minDays-  -->
	<query name="getPortfailCommonSumDebtWithOverduePlus">
		<![CDATA[select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and ((:dateEnd >= c.creditdatabeg) and ((c.isover is false) or ((c.creditdataendfact is not null) and (:dateEnd < c.creditdataendfact)))) and (:dateEndMilliseconds / cast(1000 as long)) - EXTRACT(EPOCH FROM (c.creditdataend)) >= CAST(24 as long)*60*60*(:minDays)
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- получает количество кредитов на взыскании за данный период как количество уникальных id-шников creditId collectorEntity  у которых дата начала databeg попадает в промежуток от dateStart до dateEnd. Фильтр типа(soft,hard,legal) применяется к collectionTypeId, ссылающийся на справочник   -->
	<query name="getCollectorCount">
		<![CDATA[select count(distinct c.creditId) from ru.simplgroupp.persistence.CollectorEntity c where c.databeg >= :dateStart AND  c.databeg <= :dateEnd AND (:code = -1 or (c.collectionTypeId.refHeaderId.id = 79 AND c.collectionTypeId.codeinteger = :code))
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditId.creditRequestId or log.creditId = c.creditId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.creditId.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.creditId.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.creditId.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.creditId.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.creditId.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.creditId.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.creditId.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.creditId.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c.creditId and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))
		]]>
	</query>
		<!-- получает сумму  кредитов на взыскании за данный период - т.е. тех, для которых есть collectorEntity  у которых дата начала databeg попадает в промежуток от dateStart до dateEnd. Фильтр типа(soft,hard,legal) применяется к collectionTypeId, ссылающийся на справочник   -->
	<query name="getCollectorTotalDebt">
		<![CDATA[select COALESCE(sum(c.creditsumback),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1  AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.id in (select col.creditId.id from ru.simplgroupp.persistence.CollectorEntity col where col.databeg >= :dateStart AND  col.databeg <= :dateEnd AND (:code = -1 or (col.collectionTypeId.refHeaderId.id = 79 AND col.collectionTypeId.codeinteger = :code)))
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает сумму од  кредитов на взыскании за данный период т.е. тех, для которых есть collectorEntity  у которых дата начала databeg попадает в промежуток от dateStart до dateEnd. Фильтр типа(soft,hard,legal) применяется к collectionTypeId, ссылающийся на справочник   -->
	<query name="getCollectorCommonDebt">
		<![CDATA[select COALESCE(sum(CASE WHEN c.creditsumdebt is null THEN c.creditsum WHEN c.creditsumdebt <= 0 THEN c.creditsum  else c.creditsumdebt end),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.id in (select col.creditId.id from ru.simplgroupp.persistence.CollectorEntity col where col.databeg >= :dateStart AND  col.databeg <= :dateEnd AND (:code = -1 or (col.collectionTypeId.refHeaderId.id = 79 AND col.collectionTypeId.codeinteger = :code)))
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает сумму штрафов и процентов(creditsumback - creditsumdebt (или creditsum если creditsumdebt null или <=0))  кредитов на взыскании за данный период - т.е. тех для которых есть collectorEntity  у которых дата начала databeg попадает в промежуток от dateStart до dateEnd. Фильтр типа(soft,hard,legal) применяется к collectionTypeId, ссылающийся на справочник   -->
	<query name="getCollectorPenaltiesAndPercents">
		<![CDATA[select COALESCE(sum(c.creditsumback),0)-COALESCE(sum(CASE WHEN c.creditsumdebt is null THEN c.creditsum WHEN c.creditsumdebt <= 0 THEN c.creditsum  else c.creditsumdebt end),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.id in (select col.creditId.id from ru.simplgroupp.persistence.CollectorEntity col where col.databeg >= :dateStart AND  col.databeg <= :dateEnd AND (:code = -1 or (col.collectionTypeId.refHeaderId.id = 79 AND col.collectionTypeId.codeinteger = :code)))
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает число кредитов по которым были взыскания(есть записи collector) и которые уже закрыты - взыскания - кол-во   -->
	<query name="getCollectorCollectedCount">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.id in (select col.creditId.id from ru.simplgroupp.persistence.CollectorEntity col where col.dataend >= :dateStart AND  col.dataend <= :dateEnd) and c.isover is true
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает сумму кредитов по которым были взыскания(есть записи collector) и которые уже закрыты - взыскания - кол-во   -->
	<query name="getCollectorCollectedTotal">
		<![CDATA[select COALESCE(sum(c.creditsumback),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.id in (select col.creditId.id from ru.simplgroupp.persistence.CollectorEntity col where col.dataend >= :dateStart AND  col.dataend <= :dateEnd AND (:code = -1 or (col.collectionTypeId.refHeaderId.id = 79 AND col.collectionTypeId.codeinteger = :code))) and c.isover is true
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает од кредитов по которым были взыскания(есть записи collector) и которые уже закрыты - взыскания - кол-во   -->
	<query name="getCollectorCollectedCommonDebt">
		<![CDATA[select COALESCE(sum(CASE WHEN c.creditsumdebt is null THEN c.creditsum WHEN c.creditsumdebt <= 0 THEN c.creditsum  else c.creditsumdebt end),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.id in (select col.creditId.id from ru.simplgroupp.persistence.CollectorEntity col where col.dataend >= :dateStart AND  col.dataend <= :dateEnd) and c.isover is true
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- получает сумму од и штрафов кредитов по которым были взыскания(есть записи collector) и которые уже закрыты - взыскания - кол-во   -->
	<query name="getCollectorCollectedPenaltiesAndPercents">
		<![CDATA[select COALESCE(sum(c.creditsumback),0)-COALESCE(sum(CASE WHEN c.creditsumdebt is null THEN c.creditsum WHEN c.creditsumdebt <= 0 THEN c.creditsum  else c.creditsumdebt end),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.id in (select col.creditId.id from ru.simplgroupp.persistence.CollectorEntity col where col.dataend >= :dateStart AND  col.dataend <= :dateEnd) and c.isover is true
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<query name="getAllGenders">
		<![CDATA[select NEW ru.simplgroupp.persistence.reports.model.GenderSearchModel(r.code,r.name) from ru.simplgroupp.persistence.ReferenceEntity r where r.refHeaderId.id = 20]]>
	</query>
	<query name="getAllMarriages">
		<![CDATA[select NEW ru.simplgroupp.persistence.reports.model.MarriageSearchModel(r.codeinteger,r.name) from ru.simplgroupp.persistence.ReferenceEntity r where r.refHeaderId.id = 5]]>
	</query>
	<query name="getAllRegions">
		<![CDATA[select  NEW ru.simplgroupp.persistence.reports.model.RegionSearchModel(a.region,a.regionName) from ru.simplgroupp.persistence.AddressEntity a where a.regionName != '' and a.regionName is not null and a.region != '' and a.region is not null group by a.region,a.regionName]]>
	</query>
	<query name="getAllCitiesForRegion">
		<![CDATA[select  NEW ru.simplgroupp.persistence.reports.model.PlaceSearchModel(a.city,a.cityName) from ru.simplgroupp.persistence.AddressEntity a where a.region = :region and a.cityName != '' and a.cityName is not null and a.city != '' and a.city is not null group by a.city,a.cityName]]>
	</query>
	<query name="getAllPlacesForRegion">
		<![CDATA[select  NEW ru.simplgroupp.persistence.reports.model.PlaceSearchModel(a.place,a.placeName) from ru.simplgroupp.persistence.AddressEntity a where a.region = :region and a.placeName != '' and a.placeName is not null and a.place != '' and a.place is not null group by a.place,a.placeName]]>
	</query>
	<query name="getAllManagers">
		<![CDATA[select  NEW ru.simplgroupp.persistence.reports.model.ManagerSearchModel(u.id,u.username) from ru.simplgroupp.persistence.UsersEntity u where u.usertype.id = 3]]>
	</query>
	<query name="getAllProducts">
		<![CDATA[select  NEW ru.simplgroupp.persistence.reports.model.ProductSearchModel(p.id,p.name) from ru.simplgroupp.persistence.ProductsEntity p]]>
	</query>
	<query name="getAllPaymentWays">
		<![CDATA[select  NEW ru.simplgroupp.persistence.reports.model.PaymentWaySearchModel(r.codeinteger,r.name) from ru.simplgroupp.persistence.ReferenceEntity r where r.refHeaderId.id = 17]]>
	</query>
	<query name="getAllChannels">
		<![CDATA[select  NEW ru.simplgroupp.persistence.reports.model.ChannelSearchModel(p.paramvalue,p.paramvalue) from ru.simplgroupp.persistence.PeopleBehaviorEntity p where p.parameterId.refHeaderId.id = 61 and p.parameterId.codeinteger = 1 group by p.paramvalue]]>
	</query>
	<query name="getAllProfessions">
		<![CDATA[select NEW ru.simplgroupp.persistence.reports.model.ProfessionSearchModel(r.codeinteger,r.name) from ru.simplgroupp.persistence.ReferenceEntity r where r.refHeaderId.id = 7]]>
 	</query>
 	<!--получаем все новые заявки за период  по datecontest  -->
 	<query name="creditsRequestsHistory">
		<![CDATA[select r from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :start AND  r.datecontest <= :end and r.uniquenomer is not null order by r.datecontest desc]]>
 	</query>
 	<!-- Получаем все кредиты за период. Здесь, и во всех остальных запросах по кредитам применяются дополнительные условия - кредит должен быть isActive,его статус не должен быть отменен(у statusId, который ссылается на запись справочника codeinteger не должен быть равен 7). Расчет идет по формуле, как на сайте http://alter-credit.ru/info/articles/srednevzveshennaja-procentnaja-stavka.html используя поля creditsum - сумма кредита, и creditpercent - процент кредита.    -->
 	<query name="creditsHistory">
		<![CDATA[select r from ru.simplgroupp.persistence.CreditEntity r where r.partnersId.id = 1 and r.creditStatusId.codeinteger != 7 and r.isactive = 1 and r.creditdatabeg >= :start AND  r.creditdatabeg <= :end and r.idCredit is not null order by r.creditdatabeg desc]]>
 	</query>
 	<query name="historyPaym">
		<![CDATA[select r from ru.simplgroupp.persistence.PaymentEntity r where r.createDate >= :start AND  r.createDate <= :end order by r.createDate desc]]>
 	</query>
 	<!-- сумма всех новых заявок(поля creditsum) за период. Фильтры во второй части запросов такие же  как в первом запросе. дата берется по полю datecontest -->
 	<query name="getRequestsSum">
		<![CDATA[select COALESCE(sum(r.creditsum),0) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits  and
		((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests))
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
	<!-- средняя сумма всех новых заявок(поля creditsum) за период. Фильтры во второй части запросов такие же  как в первом запросе. дата берется по полю datecontest -->
	<query name="getRequestsAvgSum">
		<![CDATA[select COALESCE(avg(r.creditsum),0) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits  and
		((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests))
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
	<!-- средний срок(поле creditdays) новых заявок за период за период. Фильтры во второй части запросов такие же  как в первом запросе. дата берется по полю datecontest -->
	<query name="getRequestsAvgTerm">
		<![CDATA[select COALESCE(avg(r.creditdays),0) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits  and
		((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests))
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
	<!-- прирост портфеля - новые кредиты за данные период - кол-во -->
	<query name="getPortfailCountGrow">
		<![CDATA[select count(c.id) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 and c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdatabeg >= :dateStart and c.creditdatabeg <= :dateEnd
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
		<!-- прирост од портфеля - новые кредиты за данные период -сумма од -->
		<query name="getPortfailSumGrow">
		<![CDATA[select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 and c.creditStatusId.codeinteger != 7 and c.creditdatabeg >= :dateStart and c.creditdatabeg <= :dateEnd and c.isactive = 1 
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))
		and
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>
	</query>
	<!-- количество принятых новых заявок за период за период. Статус берется по status_id - заявка не должна быть отклонена(2), заполнена(1) или в процессе заполнения(5)(тк такая заявка все равно была до этого принята) Фильтры во второй части запросов такие же  как в первом запросе. дата берется по полю datecontest -->
	<query name="getAcceptedRequestsCount">
		<![CDATA[select count(r.id) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests)) and (r.statusId.id != 1 and r.statusId.id != 2 and r.statusId.id != 5 and not(r.statusId.id = 8 and (r.decisionWayId is null or r.dateDecision is null) ) ) 
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
	<query name="getAcceptedRequestsSum">
		<![CDATA[select COALESCE(sum(r.creditsum),0) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest >= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests)) and (r.statusId.id != 1 and r.statusId.id != 2 and r.statusId.id != 5 and not(r.statusId.id = 8 and (r.decisionWayId is null or r.dateDecision is null) ) )
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
		<!-- количество  новых заявок за период, по которым был отказ. Статус берется по status_id - должен быть равен 2(ссылка на таблицу creditstatus) Фильтры во второй части запросов такие же  как в первом запросе. дата берется по полю datecontest -->
	<query name="getRejectedRequestsCount">
		<![CDATA[select count(r.id) from ru.simplgroupp.persistence.CreditRequestEntity r where r.dateStatus>= :dateStart AND  r.dateStatus <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests)) and r.statusId.id = 2 and r.dateStatus is not null
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
	<!-- количество  новых заявок за период, по которым был отказ клиента. Статус берется по status_id - должен быть равен 8(ссылка на таблицу creditstatus) Фильтры во второй части запросов такие же  как в первом запросе. дата берется по полю datecontest -->
	<query name="getRejectedByClientRequestsCount">
		<![CDATA[select count(r.id) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest>= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests)) and r.statusId.id = 8 and r.dateDecision is not null and r.decisionWayId.codeinteger = 2
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
	<query name="getRejectedByClientRequestsCountAutomatic">
		<![CDATA[select count(r.id) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest>= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests)) and r.statusId.id = 8 and r.decisionWayId is null
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
	<!-- сумма  новых заявок за период, по которым был отказ. Статус берется по status_id - должен быть равен 2(ссылка на таблицу creditstatus) Фильтры во второй части запросов такие же  как в первом запросе. дата берется по полю datecontest -->
	<query name="getRejectedRequestsSum">
		<![CDATA[select COALESCE(sum(r.creditsum),0) from ru.simplgroupp.persistence.CreditRequestEntity r where r.dateStatus>= :dateStart AND  r.dateStatus <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests)) and r.statusId.id = 2 and r.dateStatus is not null
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
		<!-- сумма creditsum новых заявок за период, по которым был отказ клиента. Статус берется по status_id - должен быть равен 8(ссылка на таблицу creditstatus) Фильтры во второй части запросов такие же  как в первом запросе. дата берется по полю datecontest -->
	<query name="getRejectedByClientRequestsSum">
		<![CDATA[select COALESCE(sum(r.creditsum),0) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest>= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests)) and r.statusId.id = 8 and r.dateDecision is not null and r.decisionWayId.codeinteger = 2
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>
	<query name="getRejectedByClientRequestsSumAutomatic">
		<![CDATA[select COALESCE(sum(r.creditsum),0) from ru.simplgroupp.persistence.CreditRequestEntity r where r.datecontest>= :dateStart AND  r.datecontest <= :dateEnd AND size(r.peopleMainId.systemCredits) >= :minCredits AND size(r.peopleMainId.systemCredits) <= :maxCredits and ((:minRequests= cast(-1 as long))  or ((select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) >= :minRequests and (select count(cr.id)+1 from ru.simplgroupp.persistence.CreditEntity cr where cr.peopleMainId = r.peopleMainId and cr.creditdataendfact < r.datecontest and cr.partnersId.id = 1 AND cr.creditStatusId.codeinteger != 7 and cr.isactive = 1) <= :maxRequests)) and r.statusId.id = 8 and r.decisionWayId is null
		and
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = r.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = r.peopleMainId and pr.gender is not null) ) = :gender ) 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = r.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = r.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.professionId is not null) ) = :profession )
		and 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) >=:minSalary and 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = r.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = r.peopleMainId and er.salary is not null) ) <=:maxSalary))
		and 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where log.creditRequestId = r and log.userId.id = :manager))
		and
		((:product = -1) or (r.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.region is not null) ) = :region )) 
		and
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.place is not null) ) = :place))  
		and
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = r.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = r.peopleMainId and ar.city is not null) ) = :city))
		and
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = r.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))
		]]>
	</query>	
		<!-- закрытая просрочка прошлых периодов 	 --> 
	<query name="getClosedOverduePrevPeriod">
			<![CDATA[select COALESCE(sum(cd.amountOperation - COALESCE(cd.amountPercent,0) - COALESCE(cd.amountOverpay,0) ),0) from ru.simplgroupp.persistence.CreditDetailsEntity cd where cd.eventDate >= :dateStart and cd.eventDate <= :dateEnd and cd.operationId.refHeaderId.id = 60 and cd.operationId.codeinteger = 4
		and cd.creditId.id in (select cr.id from ru.simplgroupp.persistence.CreditEntity cr where cr.creditdataend < :dateStart and (cr.isover is false or (cr.creditdataendfact >= :dateStart ) ) and cr.partnersId.id = 1 and cr.isactive = 1)]]>
	</query>
		<!-- прирост просрочки од кредитов за заданный период. Это те кредиты у которых срок запланированного окончания входит
		в данный временной интервал, но кредит не завершен либо не был завершен в том интервале(creditdataendfact больше или равна дате окончания временного промежутка) 	 --> 
		<query name="getPortfailCommonSumDebtGrov">
		<![CDATA[select COALESCE(sum(c.creditsum),0) from ru.simplgroupp.persistence.CreditEntity c where c.partnersId.id = 1 AND c.creditStatusId.codeinteger != 7 and c.isactive = 1 and c.creditdataend >= :dateStart and c.creditdataend <= :dateEnd and ((c.isover is false) or ((c.creditdataendfact is not null) AND (c.creditdataendfact > c.creditdataend) AND (:dateEnd <= c.creditdataendfact))) AND size(c.peopleMainId.systemCredits) >= :minCredits AND size(c.peopleMainId.systemCredits) <= :maxCredits
		and 
		(select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  >= :minBirthdate and (select p.birthdate from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.birthdate is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = c.peopleMainId and pr.birthdate is not null))  <= :maxBirthdate 	 
		and
		(:gender = '' or (select p.gender.code from ru.simplgroupp.persistence.PeoplePersonalEntity p where p.peopleMainId = c.peopleMainId and p.gender is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeoplePersonalEntity pr where pr.peopleMainId = p.peopleMainId and pr.gender is not null) ) = :gender ) 	 
		and 
		(:marriage = -1 or (select p.marriageId.codeinteger from ru.simplgroupp.persistence.PeopleMiscEntity p where p.peopleMainId = c.peopleMainId and p.marriageId is not null and p.id = (select max(pr.id) from ru.simplgroupp.persistence.PeopleMiscEntity pr where pr.peopleMainId = c.peopleMainId and pr.marriageId is not null) ) = :marriage ) 
		and 
		(:profession = -1 or (select e.professionId.codeinteger from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.professionId is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.professionId is not null) ) = :profession )	 
		and 	 
		((:minSalary = cast(-1 as double)) or ((select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) >=:minSalary and 	 
		(select e.salary from ru.simplgroupp.persistence.EmploymentEntity e where e.peopleMainId = c.peopleMainId and e.salary is not null and e.id = (select max(er.id) from ru.simplgroupp.persistence.EmploymentEntity er where er.peopleMainId = c.peopleMainId and er.salary is not null) ) <=:maxSalary))	 
		and 	 
		((:manager = -1) or exists(select log from ru.simplgroupp.persistence.EventLogEntity log where (log.creditRequestId = c.creditRequestId) and log.userId.id = :manager))	 
		and	 
		((:product = -1) or (c.productId.id = :product)) 
		and
		((:region = '') or ((select a.region from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.region is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.region is not null) ) = :region )) 	 
		and	 
		((:place = '') or ((select a.place from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.place is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.place is not null) ) = :place))  	 
		and	 
		((:city = '') or ((select a.city from ru.simplgroupp.persistence.AddressEntity a where a.peopleMainId = c.peopleMainId and a.city is not null and a.id = (select max(ar.id) from ru.simplgroupp.persistence.AddressEntity ar where ar.peopleMainId = c.peopleMainId and ar.city is not null) ) = :city))	 
		and	 
		((:channel = '') or (exists(select pb from ru.simplgroupp.persistence.PeopleBehaviorEntity pb where pb.peopleMainId = c.peopleMainId and pb.parameterId.refHeaderId.id = 61 and pb.parameterId.codeinteger = 1 and pb.paramvalue = :channel)))and 	 
		((:paymentWay = -1) or (exists(select payment from ru.simplgroupp.persistence.PaymentEntity payment where payment.creditId = c and payment.accountTypeId.codeinteger = :paymentWay and payment.paymenttypeId.codeinteger = 1 and payment.paymenttypeId.refHeaderId.id= 36)))]]>	 
	</query>	
</hibernate-mapping>
